import streamlit as st
import os
import fitz  # PyMuPDF
from dotenv import load_dotenv, find_dotenv
from openai import OpenAI
import tempfile
import pathlib

# Configuration de la page
st.set_page_config(
    page_title="Analyse de Documents Financiers",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre principal
st.title("üìä Analyse Automatique de Documents Financiers")
st.markdown("Transformez vos rapports financiers en r√©sum√©s structur√©s gr√¢ce √† l'IA g√©n√©rative")

# Sidebar pour la configuration
with st.sidebar:
    st.header("‚öôÔ∏è Configuration")


    # Chargement des variables d'environnement
    # Chercher et charger le .env (remonte les dossiers si besoin)
    from dotenv import find_dotenv
    env_path = find_dotenv(filename=".env", usecwd=True)
    load_dotenv(dotenv_path=env_path, override=True)
    
    # Interface pour configurer la cl√© API
    st.subheader("üîë Configuration API OpenAI")
    
    # Charger la cl√© API existante depuis .env ou session
    default_api_key = os.getenv("OPENAI_API_KEY", "")
    if 'openai_api_key' not in st.session_state:
        st.session_state.openai_api_key = default_api_key
    
    # Champ de saisie pour la cl√© API
    api_key = st.text_input(
        "Cl√© API OpenAI",
        value=st.session_state.openai_api_key,
        type="password",
        placeholder="sk-...",
        help="Entrez votre cl√© API OpenAI. Elle sera sauvegard√©e pour cette session."
    )
    
    # Mettre √† jour la session
    if api_key != st.session_state.openai_api_key:
        st.session_state.openai_api_key = api_key
        st.success("‚úÖ Cl√© API mise √† jour !")
    
    # V√©rification de la cl√©
    if not api_key:
        st.error("‚ùå Veuillez entrer votre cl√© API OpenAI")
        st.info("Vous pouvez obtenir une cl√© sur : https://platform.openai.com/api-keys")
        st.stop()
    else:
        st.success(f"‚úÖ API Key configur√©e: {api_key[:8]}...")
    
    # S√©lection du mod√®le
    model = st.selectbox(
        "Mod√®le OpenAI",
        ["gpt-4o-mini", "gpt-4o", "gpt-3.5-turbo"],
        index=0
    )
    
    # Limite de longueur du texte
    max_length = st.slider(
        "Longueur maximale du texte (caract√®res)",
        min_value=50000,
        max_value=200000,
        value=120000,
        step=10000
    )
    
    st.markdown("---")
    st.markdown("**Instructions :**")
    st.markdown("1. Uploadez votre PDF financier")
    st.markdown("2. Obtenez un r√©sum√© structur√©")
    st.markdown("3. Posez des questions sp√©cifiques")

# Fonction pour extraire le texte du PDF
def extract_pdf_text(pdf_file, max_length=120000):
    """Extrait le texte d'un PDF avec rep√®res de pages"""
    try:
        # Cr√©er un fichier temporaire
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(pdf_file.read())
            tmp_path = tmp_file.name
        
        # Ouvrir le PDF avec PyMuPDF
        pdf = fitz.open(tmp_path)
        
        # Extraire le texte page par page
        text = ""
        for i, page in enumerate(pdf, start=1):
            page_text = page.get_text()
            text += f"\n\n=== [PAGE {i}] ===\n" + page_text.strip()
        
        # Nettoyer le texte
        text = "\n".join(line.strip() for line in text.splitlines())
        
        # Limiter la longueur si n√©cessaire
        if len(text) > max_length:
            text = text[:max_length]
            st.warning(f"‚ö†Ô∏è Le texte a √©t√© tronqu√© √† {max_length} caract√®res pour √©viter les d√©passements d'API")
        
        # Nettoyer le fichier temporaire
        os.unlink(tmp_path)
        
        return text, len(text)
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la lecture du PDF: {str(e)}")
        return None, 0

# Fonction pour g√©n√©rer le r√©sum√©
def generate_summary(text, model="gpt-4o-mini"):
    """G√©n√®re un r√©sum√© financier structur√©"""
    
    # R√©cup√©rer la cl√© API depuis la session
    api_key = st.session_state.get('openai_api_key')
    if not api_key:
        st.error("‚ùå Cl√© API non configur√©e")
        return None
    
    # Consignes pour le mod√®le
    instructions = (
        "Tu es analyste financier. On te fournit le texte d'un document financier "
        "(rapport annuel, trimestriel, comptes, bilan, annexes).\n\n"
        "Produis une synth√®se **pr√©cise et chiffr√©e** en Markdown selon ce cadre :\n\n"
        "- **Soci√©t√© / P√©riode / Devise** : (si rep√©rable)\n"
        "- **R√©sum√© ex√©cutif (5‚Äì8 lignes)** : activit√©, faits marquants, contexte\n"
        "- **Chiffres cl√©s** (tableau) :\n"
        " | Indicateur | Valeur | √âvolution/Contexte | P√©riode | Page |\n"
        " |---|---:|---|---|---:|\n"
        " (exemples : Chiffre d'affaires, EBIT/EBITDA, R√©sultat net, Marge, FCF, CAPEX, "
        "Dette nette, Tr√©sorerie, NPL/Co√ªt du risque pour banque, CET1, LCR/NSFR, etc.)\n"
        "- **Analyse** :\n"
        " - Performance (croissance, marges, cash)\n"
        " - Structure financi√®re (dette, liquidit√©)\n"
        " - Risques & incertitudes (march√©, r√©glementation, change)\n"
        " - Outlook / Guidance (si communiqu√©)\n"
        "- **R√©f√©rences internes** : pages/sections √† relire\n\n"
        "Exigences :\n"
        "- **N'invente aucun chiffre**. Si une valeur n'appara√Æt pas clairement : `non pr√©cis√©`.\n"
        "- Cite la **Page** d'origine quand c'est possible (rep√®re `=== [PAGE X] ===`).\n"
        "- 6 √† 12 **indicateurs quantitatifs** maximum (les plus utiles).\n"
        "- Reste concis : 200‚Äì350 mots hors tableau."
    )
    
    try:
        client = OpenAI(api_key=api_key)
        
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": instructions},
                {"role": "user", "content": text}
            ],
            max_tokens=2000,
            temperature=0.1
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration du r√©sum√©: {str(e)}")
        return None

# Fonction pour r√©pondre aux questions
def answer_question(text, question, model="gpt-4o"):
    """R√©pond √† une question sp√©cifique sur le contenu du PDF"""
    
    # R√©cup√©rer la cl√© API depuis la session
    api_key = st.session_state.get('openai_api_key')
    if not api_key:
        st.error("‚ùå Cl√© API non configur√©e")
        return None
    
    instructions = (
        "Tu es analyste financier. On te donne un extrait de rapport financier. "
        "R√©ponds uniquement √† la question pos√©e, sans inventer de donn√©es. "
        "Si la r√©ponse n'est pas claire dans le texte, √©cris : 'non pr√©cis√©'. "
        "Quand c'est possible, indique aussi la page d'origine (rep√®re '=== [PAGE X] ===')."
    )
    
    try:
        client = OpenAI(api_key=api_key)
        
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": instructions},
                {"role": "user", "content": f"Question : {question}\n\nTexte PDF :\n{text}"}
            ],
            max_tokens=1000,
            temperature=0.1
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la r√©ponse √† la question: {str(e)}")
        return None

# Interface principale
def main():
    # Onglets pour organiser l'interface
    tab1, tab2 = st.tabs(["üìÑ Upload & Analyse", "‚ùì Questions"])
    
    with tab1:
        st.header("üìÑ Upload et Analyse du PDF")
        
        # Upload du fichier
        uploaded_file = st.file_uploader(
            "Choisissez votre document financier (PDF)",
            type=['pdf'],
            help="Formats accept√©s : PDF uniquement"
        )
        
        if uploaded_file is not None:
            # Informations sur le fichier
            file_details = {
                "Nom du fichier": uploaded_file.name,
                "Taille": f"{uploaded_file.size / 1024:.1f} KB",
                "Type": uploaded_file.type
            }
            st.json(file_details)
            
            # Bouton pour analyser
            if st.button("üöÄ Analyser le document", type="primary"):
                with st.spinner("üìñ Extraction du texte en cours..."):
                    text, text_length = extract_pdf_text(uploaded_file, max_length)
                
                if text:
                    st.success(f"‚úÖ Texte extrait : {text_length} caract√®res")
                    
                    # Aper√ßu du texte
                    with st.expander("üëÅÔ∏è Aper√ßu du texte extrait"):
                        st.text(text[:1000] + "..." if len(text) > 1000 else text)
                    
                    # G√©n√©ration du r√©sum√©
                    with st.spinner("ü§ñ G√©n√©ration du r√©sum√© en cours..."):
                        summary = generate_summary(text, model)
                    
                    if summary:
                        st.success("‚úÖ R√©sum√© g√©n√©r√© avec succ√®s !")
                        
                        # Affichage du r√©sum√©
                        st.subheader("üìä R√©sum√© Financier")
                        st.markdown(summary)
                        
                        # Stockage en session pour les questions
                        st.session_state['pdf_text'] = text
                        st.session_state['summary'] = summary
                        
                        # T√©l√©chargement du r√©sum√©
                        st.download_button(
                            label="üíæ T√©l√©charger le r√©sum√© (Markdown)",
                            data=summary,
                            file_name=f"resume_{uploaded_file.name.replace('.pdf', '')}.md",
                            mime="text/markdown"
                        )
                    else:
                        st.error("‚ùå √âchec de la g√©n√©ration du r√©sum√©")
                else:
                    st.error("‚ùå √âchec de l'extraction du texte")
    
    with tab2:
        st.header("‚ùì Questions sur le Document")
        
        if 'pdf_text' not in st.session_state:
            st.info("‚ÑπÔ∏è Veuillez d'abord analyser un document dans l'onglet 'Upload & Analyse'")
        else:
            st.success("‚úÖ Document charg√© et pr√™t pour les questions")
            
            # Interface de questions
            question = st.text_input(
                "Posez votre question sur le document :",
                placeholder="Ex: Quel est le chiffre d'affaires ? Quelle est la marge nette ?"
            )
            
            if question:
                if st.button("üîç Rechercher la r√©ponse", type="primary"):
                    with st.spinner("ü§ñ Recherche en cours..."):
                        answer = answer_question(st.session_state['pdf_text'], question, model)
                    
                    if answer:
                        st.success("‚úÖ R√©ponse trouv√©e !")
                        st.markdown("**Question :** " + question)
                        st.markdown("**R√©ponse :**")
                        st.markdown(answer)
                    else:
                        st.error("‚ùå √âchec de la recherche de r√©ponse")
            
            # Questions sugg√©r√©es
            st.subheader("üí° Questions sugg√©r√©es")
            suggested_questions = [
                "Quel est le chiffre d'affaires ?",
                "Quelle est la marge nette ?",
                "Quels sont les principaux risques identifi√©s ?",
                "Quelle est la dette nette ?",
                "Quel est le cash flow op√©rationnel ?"
            ]
            
            for i, suggested_q in enumerate(suggested_questions):
                if st.button(f"‚ùì {suggested_q}", key=f"suggested_{i}"):
                    with st.spinner("ü§ñ Recherche en cours..."):
                        answer = answer_question(st.session_state['pdf_text'], suggested_q, model)
                    
                    if answer:
                        st.success("‚úÖ R√©ponse trouv√©e !")
                        st.markdown("**Question :** " + suggested_q)
                        st.markdown("**R√©ponse :**")
                        st.markdown(answer)
                    else:
                        st.error("‚ùå √âchec de la recherche de r√©ponse")

# Footer
st.markdown("---")
st.markdown(
    "**Note importante :** V√©rifiez toujours les chiffres affich√©s et leurs pages d'origine. "
    "En cas d'ambigu√Øt√© dans le PDF, utilisez 'non pr√©cis√©' et confirmez dans le document source."
)

if __name__ == "__main__":
    main()
